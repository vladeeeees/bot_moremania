import os
import logging
import asyncio
import subprocess
from dotenv import load_dotenv
import pandas as pd

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup 
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = os.getenv("ADMIN_IDS", "").split(",")

# ============= –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–∫–∞—Ü–∏–π =============
locations = {
    "kievskaya": {
        "display_name": "–ú–æ—Ä–µ–º–∞–Ω–∏—è.–ö–∏–µ–≤—Å–∫–∞—è",
        "password_env": "PASSWORD_KIEVSKAYA",
        "chat_id_env": "CHAT_ID_KIEVSKAYA"
    },
    "dmitrovka": {
        "display_name": "–ú–æ—Ä–µ–º–∞–Ω–∏—è.–î–º–∏—Ç—Ä–æ–≤–∫–∞",
        "password_env": "PASSWORD_DMITROVKA",
        "chat_id_env": "CHAT_ID_DMITROVKA"
    }
}

scheduled_jobs = {
    "kievskaya": {"cron": {"hour": 14, "minute": 24, "day_of_week": "fri"}},
    "dmitrovka": {"cron": {"hour": 10, "minute": 2, "day_of_week": "mon"}}
}

# ============= –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∫—Ä–∏–ø—Ç–æ–º =============
async def execute_script(location_key: str, password: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    try:
        script_path = os.path.join(
            os.path.dirname(__file__),
            "script.py"
        )

        result = subprocess.run(
            ["python", script_path, location_key],
            capture_output=True,
            text=True
        )

        output = result.stdout.strip()
        if result.returncode != 0:
            raise Exception(result.stderr)

        output_lines = output.splitlines()
        last_line = output_lines[-1].strip()

        if last_line.startswith("SUCCESS:"):
            file_path = last_line.replace("SUCCESS:", "").strip()
        else:
            raise Exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: {last_line}")

        return file_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è {location_key}: {e}")
        raise

async def send_results_to_chat(location_key: str, file_path: str, chat_id: str, 
                              is_auto: bool, user_message: types.Message = None):
    try:
        file_name = os.path.basename(file_path)
        df = pd.read_excel(file_path)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        prefix = "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–≥—Ä—É–∑–∫–∞" if is_auto else "üìä –†—É—á–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞"
        stats = (
            f"{prefix}\n"
            f"–õ–æ–∫–∞—Ü–∏—è: {locations[location_key]['display_name']}\n"
            f"–ó–∞–ø–∏—Å–µ–π: {len(df)}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                 )
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç
        if chat_id and chat_id.strip():
            await bot.send_message(
                chat_id=int(chat_id),
                text=stats
            )
            await bot.send_document(
                chat_id=int(chat_id),
                document=types.FSInputFile(file_path),
                caption=f"–§–∞–π–ª: {file_name}"
            )

        

            long_message = ""
            for _, row in df.iterrows():
                —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ = row['–°–æ—Ç—Ä—É–¥–Ω–∏–∫']
                —Ä–µ–≥_—Å—Ä–æ–∫ = row['–†–µ–≥. —Å—Ä–æ–∫']
                –ø–∞—Ç–µ–Ω—Ç_—Å—Ä–æ–∫ = row['–ü–∞—Ç–µ–Ω—Ç —Å—Ä–æ–∫']

                message_text = (
                    f"{—Å–æ—Ç—Ä—É–¥–Ω–∏–∫}\n"
                    f"\t–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {—Ä–µ–≥_—Å—Ä–æ–∫}\n"
                    f"\t–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ç–µ–Ω—Ç–∞: {–ø–∞—Ç–µ–Ω—Ç_—Å—Ä–æ–∫}\n\n"
                )
                long_message += message_text
        
       
        if chat_id and chat_id.strip():
            await bot.send_message(
                chat_id=int(chat_id),
                text=long_message
            )
        
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
        if not is_auto and user_message:
            await user_message.answer_document(
                types.FSInputFile(file_path),
                caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}"
            )
    

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {str(e)}"
        logger.error(error_msg)
        if user_message:
            await user_message.answer(error_msg)

# ============= –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ =============
async def scheduled_task(location_key: str):
    try:
        location_config = locations.get(location_key)
        password = os.getenv(location_config["password_env"])
        chat_id = os.getenv(location_config["chat_id_env"])
        
        file_path = await execute_script(location_key, password)
        await send_results_to_chat(
            location_key=location_key,
            file_path=file_path,
            chat_id=chat_id,
            is_auto=True
        )

    except Exception as e:
        error_msg = f"‚ùå –ê–≤—Ç–æ–∑–∞–¥–∞—á–∞ {location_key}: {str(e)}"
        logger.error(error_msg)
        for admin_id in ADMIN_IDS:
            if admin_id.strip():
                await bot.send_message(int(admin_id), error_msg)

async def setup_scheduler():
    scheduler = AsyncIOScheduler()
    for location_key, params in scheduled_jobs.items():
        trigger = CronTrigger(**params["cron"])
        scheduler.add_job(
            scheduled_task,
            trigger=trigger,
            args=[location_key],
            timezone="Europe/Moscow"
        )
    scheduler.start()

# ============= –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞ =============
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class Form(StatesGroup):
    waiting_for_location = State()
    waiting_for_password = State()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    return str(user_id) in ADMIN_IDS

def validate_location(location_key: str) -> bool:
    return location_key in locations

def create_main_button(keyboard):
    main_button = KeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é")
    return ReplyKeyboardMarkup(
        keyboard=[*keyboard.keyboard, [main_button]],
        resize_keyboard=True
    )

@dp.message(CommandStart())
@dp.message(Command("help"))
async def send_welcome(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")]],
        resize_keyboard=True
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' –¥–ª—è –∑–∞–ø—É—Å–∫–∞.", reply_markup=keyboard)

@dp.message(lambda message: message.text == "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")
async def choose_location(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=loc["display_name"])] for loc in locations.values()],
        resize_keyboard=True
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:",
        reply_markup=create_main_button(keyboard)
    )
    await state.set_state(Form.waiting_for_location)

@dp.message(Form.waiting_for_location)
async def process_location(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞ –≥–ª–∞–≤–Ω—É—é":
        await send_welcome(message)
        await state.clear()
        return

    location_key = next((key for key, loc in locations.items() if loc["display_name"] == message.text), None)
    
    if not location_key:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞")
        return

    await state.update_data(location=location_key)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é")]],
            resize_keyboard=True
        )
    )
    await state.set_state(Form.waiting_for_password)

@dp.message(Form.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞ –≥–ª–∞–≤–Ω—É—é":
        await send_welcome(message)
        await state.clear()
        return

    user_data = await state.get_data()
    location_key = user_data.get("location")
    
    location_config = locations.get(location_key)
    if not location_config:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–∫–∞—Ü–∏–∏")
        await state.clear()
        return

    correct_password = os.getenv(location_config["password_env"])
    if message.text == correct_password:
        await message.answer("‚è≥ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –ò–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            file_path = await execute_script(location_key, correct_password)
            chat_id = os.getenv(location_config["chat_id_env"])
            
            await send_results_to_chat(
                location_key=location_key,
                file_path=file_path,
                chat_id=chat_id,
                is_auto=False,
                user_message=message
            )

            df = pd.read_excel(file_path)

            long_message = ""
            for _, row in df.iterrows():
                —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ = row['–°–æ—Ç—Ä—É–¥–Ω–∏–∫']
                —Ä–µ–≥_–Ω–æ–º–µ—Ä = row['–†–µ–≥. –Ω–æ–º–µ—Ä']
                —Ä–µ–≥_—Å—Ä–æ–∫ = row['–†–µ–≥. —Å—Ä–æ–∫']
                –ø–∞—Ç–µ–Ω—Ç_–Ω–æ–º–µ—Ä = row['–ü–∞—Ç–µ–Ω—Ç –Ω–æ–º–µ—Ä']
                –ø–∞—Ç–µ–Ω—Ç_—Å—Ä–æ–∫ = row['–ü–∞—Ç–µ–Ω—Ç —Å—Ä–æ–∫']

                message_text = (
                    f"{—Å–æ—Ç—Ä—É–¥–Ω–∏–∫}\n"
                    f"\t–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {—Ä–µ–≥_—Å—Ä–æ–∫}\n"
                    f"\t–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ç–µ–Ω—Ç–∞: {–ø–∞—Ç–µ–Ω—Ç_—Å—Ä–æ–∫}\n\n"
                )
                long_message += message_text

            await message.answer(long_message)


            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def main():
    await setup_scheduler()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())